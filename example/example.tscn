[gd_scene load_steps=16 format=3 uid="uid://bmhqnfqnfjgy5"]

[ext_resource type="PackedScene" uid="uid://uwjofkm4iyb2" path="res://addons/rigid_character_body_3d/example/rigid_player.tscn" id="3_e4etq"]

[sub_resource type="ProceduralSkyMaterial" id="ProceduralSkyMaterial_10kov"]

[sub_resource type="Sky" id="Sky_w5lt0"]
sky_material = SubResource("ProceduralSkyMaterial_10kov")

[sub_resource type="Environment" id="Environment_yp2li"]
background_mode = 2
sky = SubResource("Sky_w5lt0")
ambient_light_source = 3
reflected_light_source = 2

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_5iaxh"]
albedo_color = Color(0.5, 0.5, 0.5, 1)
uv1_triplanar = true

[sub_resource type="PlaneMesh" id="PlaneMesh_dbtwq"]
material = SubResource("StandardMaterial3D_5iaxh")
size = Vector2(200, 200)

[sub_resource type="ConcavePolygonShape3D" id="ConcavePolygonShape3D_75t77"]
data = PackedVector3Array(100, 0, 100, -100, 0, 100, 100, 0, -100, -100, 0, 100, -100, 0, -100, 100, 0, -100)

[sub_resource type="GDScript" id="GDScript_edptv"]
resource_name = "moving_wall"
script/source = "#Copyright 2024 David Krstevski
#
#Permission is hereby granted, free of charge, to any person obtaining a copy
#of this software and associated documentation files (the “Software”), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is furnished
#to do so, subject to the following conditions:
#
#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.
#
#THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
#WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
#CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


extends AnimatableBody3D


var start_position: Vector3
var end_position: Vector3
var time: float
@export var frequency: float = 2
@export var length: float = 2


func _ready():
	start_position = position
	end_position = start_position + -global_basis.z * length


func _physics_process(delta):
	time += delta
	var w = sin(time * frequency)
	w = remap(w, -1, 1, 0, 1)
	position = start_position.lerp(end_position, w)
"

[sub_resource type="ConcavePolygonShape3D" id="ConcavePolygonShape3D_2ojj7"]
data = PackedVector3Array(-1, 1, 0.25, 1, 1, 0.25, -1, -1, 0.25, 1, 1, 0.25, 1, -1, 0.25, -1, -1, 0.25, 1, 1, -0.25, -1, 1, -0.25, 1, -1, -0.25, -1, 1, -0.25, -1, -1, -0.25, 1, -1, -0.25, 1, 1, 0.25, 1, 1, -0.25, 1, -1, 0.25, 1, 1, -0.25, 1, -1, -0.25, 1, -1, 0.25, -1, 1, -0.25, -1, 1, 0.25, -1, -1, -0.25, -1, 1, 0.25, -1, -1, 0.25, -1, -1, -0.25, 1, 1, 0.25, -1, 1, 0.25, 1, 1, -0.25, -1, 1, 0.25, -1, 1, -0.25, 1, 1, -0.25, -1, -1, 0.25, 1, -1, 0.25, -1, -1, -0.25, 1, -1, 0.25, 1, -1, -0.25, -1, -1, -0.25)

[sub_resource type="BoxMesh" id="BoxMesh_3t46o"]
size = Vector3(2, 2, 0.5)

[sub_resource type="PhysicsMaterial" id="PhysicsMaterial_4ymrt"]
friction = 100.0
rough = true

[sub_resource type="ConcavePolygonShape3D" id="ConcavePolygonShape3D_mfogw"]
data = PackedVector3Array(-1.5, 0.3, 1.5, 1.5, 0.3, 1.5, -1.5, -0.3, 1.5, 1.5, 0.3, 1.5, 1.5, -0.3, 1.5, -1.5, -0.3, 1.5, 1.5, 0.3, -1.5, -1.5, 0.3, -1.5, 1.5, -0.3, -1.5, -1.5, 0.3, -1.5, -1.5, -0.3, -1.5, 1.5, -0.3, -1.5, 1.5, 0.3, 1.5, 1.5, 0.3, -1.5, 1.5, -0.3, 1.5, 1.5, 0.3, -1.5, 1.5, -0.3, -1.5, 1.5, -0.3, 1.5, -1.5, 0.3, -1.5, -1.5, 0.3, 1.5, -1.5, -0.3, -1.5, -1.5, 0.3, 1.5, -1.5, -0.3, 1.5, -1.5, -0.3, -1.5, 1.5, 0.3, 1.5, -1.5, 0.3, 1.5, 1.5, 0.3, -1.5, -1.5, 0.3, 1.5, -1.5, 0.3, -1.5, 1.5, 0.3, -1.5, -1.5, -0.3, 1.5, 1.5, -0.3, 1.5, -1.5, -0.3, -1.5, 1.5, -0.3, 1.5, 1.5, -0.3, -1.5, -1.5, -0.3, -1.5)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_t3gbo"]
transparency = 1
albedo_color = Color(0, 0.501961, 1, 0.666667)

[sub_resource type="BoxMesh" id="BoxMesh_koi6b"]
material = SubResource("StandardMaterial3D_t3gbo")
size = Vector3(3, 0.6, 3)

[sub_resource type="GDScript" id="GDScript_1be5n"]
resource_name = "cube_spawner"
script/source = "#Copyright 2024 David Krstevski
#
#Permission is hereby granted, free of charge, to any person obtaining a copy
#of this software and associated documentation files (the “Software”), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is furnished
#to do so, subject to the following conditions:
#
#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.
#
#THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
#WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
#CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


extends Node3D


func _ready():
	for i in range(1, 4):
		spawn_cube(i as float / 3.0)
		await get_tree().create_timer(2).timeout


func spawn_cube(size: float):
	var p = global_position
	var r = RigidBody3D.new()
	r.mass = size
	r.set_collision_layer_value(1, true)
	add_child(r)
	r.global_position = global_position
	r.global_rotation_degrees = Vector3(randf_range(0, 360), randf_range(0, 360), randf_range(0, 360))
	var c = CollisionShape3D.new()
	var s = BoxShape3D.new()
	s.size = Vector3.ONE * r.mass
	r.add_child(c)
	c.shape = s
	var m = MeshInstance3D.new()
	var bm = BoxMesh.new()
	bm.size = s.size
	r.add_child(m)
	m.mesh = bm
"

[node name="Example" type="Node3D"]

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_yp2li")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="WorldEnvironment"]
transform = Transform3D(0.707107, 0.5, -0.5, 0, 0.707107, 0.707107, 0.707107, -0.5, 0.5, 0, 0, 0)
shadow_enabled = true

[node name="Ground" type="MeshInstance3D" parent="."]
mesh = SubResource("PlaneMesh_dbtwq")

[node name="StaticBody3D" type="StaticBody3D" parent="Ground"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="Ground/StaticBody3D"]
shape = SubResource("ConcavePolygonShape3D_75t77")

[node name="RigidPlayer" parent="." instance=ExtResource("3_e4etq")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)

[node name="Obstacles" type="Node3D" parent="."]

[node name="MovingWall" type="AnimatableBody3D" parent="Obstacles"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 8)
script = SubResource("GDScript_edptv")
frequency = 4.0
length = 5.0

[node name="CollisionShape3D" type="CollisionShape3D" parent="Obstacles/MovingWall"]
shape = SubResource("ConcavePolygonShape3D_2ojj7")

[node name="Model" type="MeshInstance3D" parent="Obstacles/MovingWall"]
mesh = SubResource("BoxMesh_3t46o")
skeleton = NodePath("../../..")
surface_material_override/0 = SubResource("StandardMaterial3D_5iaxh")

[node name="MovingWall2" type="AnimatableBody3D" parent="Obstacles"]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, -11, 1.75, 10)
script = SubResource("GDScript_edptv")
frequency = 8.0

[node name="CollisionShape3D" type="CollisionShape3D" parent="Obstacles/MovingWall2"]
shape = SubResource("ConcavePolygonShape3D_2ojj7")

[node name="Model" type="MeshInstance3D" parent="Obstacles/MovingWall2"]
mesh = SubResource("BoxMesh_3t46o")
skeleton = NodePath("../../..")
surface_material_override/0 = SubResource("StandardMaterial3D_5iaxh")

[node name="MovingWall3" type="AnimatableBody3D" parent="Obstacles"]
transform = Transform3D(-4.37114e-08, 0, 1, 1, -4.37114e-08, 4.37114e-08, 4.37114e-08, 1, 0, -13, 1.75, 8)
script = SubResource("GDScript_edptv")
frequency = 0.5
length = 6.0

[node name="CollisionShape3D" type="CollisionShape3D" parent="Obstacles/MovingWall3"]
transform = Transform3D(-4.37114e-08, 0, -1, 0, 1, 0, 1, 0, -4.37114e-08, 0, 0, 0)
shape = SubResource("ConcavePolygonShape3D_2ojj7")

[node name="Model" type="MeshInstance3D" parent="Obstacles/MovingWall3"]
transform = Transform3D(-4.37114e-08, 0, -1, 0, 1, 0, 1, 0, -4.37114e-08, 0, 0, 0)
mesh = SubResource("BoxMesh_3t46o")
skeleton = NodePath("../../..")
surface_material_override/0 = SubResource("StandardMaterial3D_5iaxh")

[node name="MovingWall4" type="AnimatableBody3D" parent="Obstacles"]
transform = Transform3D(-4.37114e-08, 0, 1, 1, -4.37114e-08, 4.37114e-08, 4.37114e-08, 1, 0, -13, 1.75, 6)
physics_material_override = SubResource("PhysicsMaterial_4ymrt")
script = SubResource("GDScript_edptv")
frequency = 4.0

[node name="CollisionShape3D" type="CollisionShape3D" parent="Obstacles/MovingWall4"]
transform = Transform3D(-4.37114e-08, 0, -1, 0, 1, 0, 1, 0, -4.37114e-08, 0, 0, 0)
shape = SubResource("ConcavePolygonShape3D_2ojj7")

[node name="Model" type="MeshInstance3D" parent="Obstacles/MovingWall4"]
transform = Transform3D(-4.37114e-08, 0, -1, 0, 1, 0, 1, 0, -4.37114e-08, 0, 0, 0)
mesh = SubResource("BoxMesh_3t46o")
skeleton = NodePath("../../..")
surface_material_override/0 = SubResource("StandardMaterial3D_5iaxh")

[node name="Water" type="Area3D" parent="Obstacles"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -5, 0.3, 3)
linear_damp_space_override = 1
linear_damp = 5.0

[node name="CollisionShape3D" type="CollisionShape3D" parent="Obstacles/Water"]
shape = SubResource("ConcavePolygonShape3D_mfogw")

[node name="Model" type="MeshInstance3D" parent="Obstacles/Water"]
mesh = SubResource("BoxMesh_koi6b")
skeleton = NodePath("../../..")

[node name="Platform" type="CSGBox3D" parent="Obstacles"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -11, 1, 6)
use_collision = true
size = Vector3(2, 2, 2)
material = SubResource("StandardMaterial3D_5iaxh")

[node name="Platform2" type="CSGBox3D" parent="Obstacles"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -11, 1, 8)
use_collision = true
size = Vector3(2, 2, 2)
material = SubResource("StandardMaterial3D_5iaxh")

[node name="Slope" type="CSGPolygon3D" parent="Obstacles"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -10, 0, 7)
use_collision = true
polygon = PackedVector2Array(0, 2, 0, 0, 2, 0)
depth = 2.0
material = SubResource("StandardMaterial3D_5iaxh")

[node name="Stairs" type="CSGPolygon3D" parent="Obstacles"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -10, 0, 9)
use_collision = true
polygon = PackedVector2Array(0, 2, 0, 0, 2, 0, 2, 0.2, 1.8, 0.2, 1.8, 0.4, 1.6, 0.4, 1.6, 0.6, 1.4, 0.6, 1.4, 0.8, 1.2, 0.8, 1.2, 1, 1, 1, 1, 1.2, 0.8, 1.2, 0.8, 1.4, 0.6, 1.4, 0.6, 1.6, 0.4, 1.6, 0.4, 1.8, 0.2, 1.8, 0.2, 2)
depth = 2.0
material = SubResource("StandardMaterial3D_5iaxh")

[node name="SteepSlope" type="CSGPolygon3D" parent="Obstacles"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -10, 0, 5)
use_collision = true
polygon = PackedVector2Array(1, 2, 1, 0, 2, 0)
depth = 2.0
material = SubResource("StandardMaterial3D_5iaxh")

[node name="CubeSpawner" type="Node3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -5.59556, 5.77403, 6.5996)
script = SubResource("GDScript_1be5n")
